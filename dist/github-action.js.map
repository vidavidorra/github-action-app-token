{"version":3,"sources":["../src/authenticate.ts","../src/options.ts","../src/github-action.ts","../bin/github-action.ts"],"sourcesContent":["import {createAppAuth} from '@octokit/auth-app';\nimport {getOctokit} from '@actions/github';\nimport {Options} from './options.js';\n\ninterface InstallationAuthentication {\n  token: string;\n  createdAt: string;\n  expiresAt: string;\n}\n\nasync function authenticate(\n  options: Options,\n): Promise<InstallationAuthentication> {\n  const auth = createAppAuth({\n    appId: options.appId,\n    privateKey: options.privateKey,\n  });\n  const appAuth = await auth({type: 'app'});\n  const octokit = getOctokit(appAuth.token);\n\n  let {installationId} = options;\n  if (installationId === undefined) {\n    const installations = await octokit.rest.apps.listInstallations();\n    if (installations.data.length === 0) {\n      throw new Error('The GitHub App must have at least one installation');\n    }\n\n    if (options.owner === undefined && installations.data.length > 1) {\n      throw new Error(\n        'Without \"owner\", the GitHub App must have exactly one installation',\n      );\n    }\n\n    if (options.owner === undefined) {\n      installationId = installations.data.at(0)?.id;\n    } else {\n      const installation = installations.data.find(\n        (installation) =>\n          installation.account?.login === options.owner ||\n          installation.account?.slug === options.owner,\n      );\n      if (installation === undefined) {\n        throw new Error('The \"owner\" must have the GitHub App installed');\n      }\n\n      installationId = installation.id;\n    }\n  }\n\n  const installationAuth = await auth({\n    installationId,\n    type: 'installation',\n    repositoryNames: [...options.repositories],\n  });\n\n  return {\n    token: installationAuth.token,\n    createdAt: installationAuth.createdAt,\n    expiresAt: installationAuth.expiresAt,\n  };\n}\n\nexport default authenticate;\nexport {authenticate, InstallationAuthentication};\n","import {z} from 'zod';\n\nconst rsaPrivateKeyStart = '-----BEGIN RSA PRIVATE KEY-----';\nconst rsaPrivateKeyEnd = '-----END RSA PRIVATE KEY-----';\n\n/**\n * Convert a string argument to a number if there is a valid conversion.\n *\n * 1. Remove trailing and leading whitespace.\n * 2. Convert integer string to a `number`.\n * 3. Convert empty string to `undefined`.\n * 4. Return raw argument if no conversion could be made.\n */\nfunction stringArgToNumber(arg: unknown): number | unknown {\n  const isString = typeof arg === 'string';\n  if (isString && /^[ \\t]*[1-9]\\d*[ \\t]*$/.test(arg)) {\n    return Number.parseInt(arg, 10);\n  }\n\n  return isString && arg.length === 0 ? undefined : arg;\n}\n\nconst options = z.object({\n  appId: z.preprocess(stringArgToNumber, z.number().int().positive()),\n  privateKey: z\n    .string()\n    .min(rsaPrivateKeyStart.length + rsaPrivateKeyEnd.length + 1)\n    .superRefine((value, context) => {\n      if (!value.startsWith(`${rsaPrivateKeyStart}`)) {\n        context.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `String must start with \"${rsaPrivateKeyStart}\"`,\n        });\n      }\n\n      if (!new RegExp(`${rsaPrivateKeyEnd}(\\r|\\n|\\r\\n)*$`).test(value)) {\n        context.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `String must end with \"${rsaPrivateKeyEnd}\"`,\n        });\n      }\n    }),\n  /**\n   * Repositories with regular expression as used by [GitHub Desktop](\n   * https://github.com/desktop/desktop/blob/release-3.0.2/app/src/ui/add-repository/sanitized-repository-name.ts#L9-L11).\n   * This especially makes sure the repositories don't include an owner, which\n   * is relevant for these options as `owner` is specified separately.\n   */\n  repositories: z.preprocess(\n    (arg) => (Array.isArray(arg) ? new Set(arg) : arg),\n    z.set(z.string().regex(/^[\\w.-]+$/)).min(1),\n  ),\n  owner: z.string().min(1).optional(),\n  installationId: z\n    .preprocess(stringArgToNumber, z.number().int().positive().optional())\n    .optional(),\n});\n\ntype Options = z.infer<typeof options>;\n\nexport {options, Options};\n","import core from '@actions/core';\nimport {authenticate, InstallationAuthentication} from './authenticate.js';\nimport {options} from './options.js';\n\nasync function run(\n  auth: typeof authenticate,\n): Promise<InstallationAuthentication> {\n  try {\n    const inputs = {\n      appId: core.getInput('appId', {required: true}),\n      privateKey: core.getInput('privateKey', {required: true}),\n      repositories: core.getMultilineInput('repositories', {required: true}),\n      owner: core.getInput('owner'),\n      installationId: core.getInput('installationId'),\n    };\n\n    const parsedOptions = options.parse(inputs);\n    const installationAuth = await auth(parsedOptions);\n\n    core.setOutput('token', installationAuth.token);\n    core.setOutput('createdAt', installationAuth.createdAt);\n    core.setOutput('expiresAt', installationAuth.expiresAt);\n\n    return installationAuth;\n  } catch (error: unknown) {\n    core.setFailed(error instanceof Error ? error.message : 'Unknown error');\n    throw error;\n  }\n}\n\nexport {run};\n","import authenticate from '../src/index.js';\nimport {run} from '../src/github-action.js';\n\nawait run(authenticate);\n"],"mappings":"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","names":[]}